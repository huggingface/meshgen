name: Package Release
on:
    push:
        branches:
            - "releases/**"
    workflow_dispatch:

jobs:
    package-release:
        strategy:
            matrix:
                platform:
                    - filename: cpu-win64
                      os: windows-latest
                      requirements: cpu.txt
                      args: ""

                    - filename: cuda-win64
                      os: windows-latest
                      requirements: cuda.txt
                      args: "--only-binary llama_cpp_python"

                    - filename: cpu-macos-arm
                      os: macos-latest
                      requirements: cpu.txt
                      args: ""

                    - filename: cpu-macos-x86
                      os: macos-13
                      requirements: cpu.txt
                      args: ""

                    - filename: cpu-linux
                      os: ubuntu-latest
                      requirements: cpu.txt
                      args: ""

                    - filename: cuda-linux
                      os: ubuntu-latest
                      requirements: cuda.txt
                      args: "--only-binary llama_cpp_python"
        runs-on: ${{ matrix.platform.os }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  path: meshgen

            - name: Setup Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.11"

            - name: Upgrade pip
              shell: bash
              run: "python -m pip install --upgrade setuptools pip tomli tomli-w"

            - name: Download wheels
              shell: bash
              run: |
                  python -m pip wheel -r requirements/${{ matrix.platform.requirements }} \
                  ${{ matrix.platform.args }} \
                  --wheel-dir wheels
              working-directory: meshgen

            - name: Update manifest
              shell: bash
              run: |
                  python -c "
                  import tomli, tomli_w, os
                  with open('blender_manifest.toml', 'rb') as f:
                      manifest = tomli.load(f)
                  manifest['wheels'] = [f'\"wheels/{wheel}\"' for wheel in os.listdir('wheels')]
                  with open('blender_manifest.toml', 'wb') as f:
                      tomli_w.dump(manifest, f)
                  "
              working-directory: meshgen

            - name: Build extension
              shell: bash
              run: blender --command extension build
              working-directory: meshgen

            - name: Archive and upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: meshgen-${{ matrix.platform.filename }}
                  path: meshgen-${{ matrix.platform.filename }}.zip
